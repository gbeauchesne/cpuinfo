#!/bin/sh
#
#  cpuinfo configure script (C) 2006-2007 Gwenole Beauchesne
#
PACKAGE=cpuinfo

# set temporary file name
if test ! -z "$TMPDIR" ; then
    TMPDIR1="${TMPDIR}"
elif test ! -z "$TEMPDIR" ; then
    TMPDIR1="${TEMPDIR}"
else
    TMPDIR1="/tmp"
fi

TMPC="${TMPDIR1}/cpuinfo-conf-${RANDOM}-$$-${RANDOM}.c"
TMPO="${TMPDIR1}/cpuinfo-conf-${RANDOM}-$$-${RANDOM}.o"
TMPE="${TMPDIR1}/cpuinfo-conf-${RANDOM}-$$-${RANDOM}"
TMPS="${TMPDIR1}/cpuinfo-conf-${RANDOM}-$$-${RANDOM}.S"

# default parameters
prefix="/usr"
libdir=""
cc="gcc"
build_static="no"
build_shared="no"
host_os=`uname -s | tr '[A-Z]' '[a-z]'`
host_cpu=`uname -m`
case "$host_cpu" in
i386|i486|i586|i686|i86pc|BePC)
    host_cpu="i386"
    ;;
ia64)
    host_cpu="ia64"
    ;;
"Power Macintosh"|ppc)
    host_cpu="ppc"
    ;;
ppc64)
    host_cpu="ppc64"
    ;;
sparc)
    host_cpu="sparc"
    ;;
sparc64)
    host_cpu="sparc64"
    ;;
x86_64|amd64)
    host_cpu="x86_64"
    ;;
*)
    host_cpu="unknown"
    ;;
esac
case "$host_os" in
cygwin*)
    host_os="windows"
    ;;
esac

# find source path
# XXX: we assume an absolute path is given when launching configure, 
# except in './configure' case.
source_path=${0%configure}
source_path=${source_path%/}
source_path_used="yes"
if test -z "$source_path" -o "$source_path" = "." ; then
    source_path=`pwd`
    source_path_used="no"
fi

for opt do
case "$opt" in
--prefix=*)
    prefix=`echo $opt | cut -d '=' -f 2`
    ;;
--libdir=*)
    libdir=`echo $opt | cut -d '=' -f 2`
    ;;
--enable-static)
    build_static="yes"
    ;;
--disable-static)
    build_static="no"
    ;;
--enable-shared)
    build_shared="yes"
    ;;
--disable-shared)
    build_shared="no"
    ;;
--with-cc=*)
    cc=`echo $opt | cut -d '=' -f 2`
    ;;
esac
done

# check for libdir name
if test -z "$libdir"; then
    case $host_os in
    linux)
	# test if the compiler is 64bit
        echo 'int i;' > $TMPC
	cpuinfo_64bit_output=no
	if $cc -o $TMPO -c $TMPC; then
	    case `/usr/bin/file $TMPO` in
	    *"ELF 64"*)
		cpuinfo_64bit_output=yes
		;;
	    esac
	fi
	rm -f $TMPC $TMPO
	;;
    esac
    case $host_cpu:$cpuinfo_64bit_output in
    ppc64:yes | s390x:yes | sparc64:yes | x86_64:yes)
	libdir="$prefix/lib64"
	;;
    *)
	libdir="$prefix/lib"
	;;
    esac
fi

# check for __attribute__((visibility())) support
cat > $TMPC << EOF
int foo __attribute__((visibility("hidden"))) = 1;
int bar __attribute__((visibility("protected"))) = 1;
EOF
has_visibility_attribute=no
if $cc -Werror -S $TMPC -o $TMPS >/dev/null 2>&1; then
    if grep '\.hidden.*foo' $TMPS >/dev/null; then
	if grep '\.protected.*bar' $TMPS >/dev/null; then
	    has_visibility_attribute=yes
	fi
    fi
fi
rm -f $TMPC $TMPS

# check for compiler flag
check_cc_option() {
    echo "int i;" > $TMPC
    if $cc $* -c $TMPC -o $TMPO > /dev/null 2>&1; then
	rm -f $TMPC $TMPO
	return 0
    fi
    rm -f $TMPC
    return 1
}

# check for CFLAGS
if test -z "$CFLAGS"; then
    CFLAGS="-O2 -g"
    if check_cc_option -mtune=generic $CFLAGS; then
	CFLAGS="$CFLAGS -mtune=generic"
    fi
fi
if test "$biarch" = "yes" -a -z "$CFLAGS_32"; then
    CFLAGS_32="-m32 -O2 -g"
    if check_cc_option -mtune=generic $CFLAGS_32; then
	CFLAGS_32="$CFLAGS_32 -mtune=generic"
    fi
fi

# print configure help
if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
cat << EOF

Usage: configure [options]
Options: [defaults in brackets after descriptions]

EOF
echo "Standard options:"
echo "  --help                      print this message"
echo "  --prefix=PREFIX             install in PREFIX [$prefix]"
echo "  --libdir=LIBDIR             use LIBDIR for native libraries [$libdir]"
echo "  --enable-static             build static libraries [$build_static]"
echo "  --enable-shared             build shared libraries [$build_shared]"
echo ""
echo "Advanced options (experts only):"
echo "  --source-path=PATH          path of source code [$source_path]"
echo "  --with-cc=CC                use C compiler CC [$cc]"
echo ""
echo "NOTE: The object files are built at the place where configure is launched"
exit 1
fi

echo "Install prefix            $prefix"
echo "Library prefix            $libdir"
echo "Source path               $source_path"
echo "C compiler                $cc"
echo "Build static libraries    $build_static"
echo "Build shared libraries    $build_shared"
echo "Host OS                   $host_os"
echo "Host CPU                  $host_cpu"

config_mak="config-host.mak"
echo "# Automatically generated by configure - do not modify" > $config_mak

config_h="config-host.h"
echo "/* Automatically generated by configure - do not modify */" > $config_h

echo "CC=$cc" >> $config_mak
echo "CFLAGS=$CFLAGS" >> $config_mak
if test "$host_os" = "linux"; then
    echo "OS=linux" >> $config_mak
    echo "#define HOST_LINUX 1" >> $config_h
    echo "#define HOST_OS \"linux\"" >> $config_h
elif test "$host_os" = "dragonfly"; then
    echo "OS=dragonfly" >> $config_mak
    echo "#define HOST_DRAGONFLY 1" >> $config_h
    echo "#define HOST_OS \"dragonfly\"" >> $config_h
elif test "$host_os" = "freebsd"; then
    echo "OS=freebsd" >> $config_mak
    echo "#define HOST_FREEBSD 1" >> $config_h
    echo "#define HOST_OS \"freebsd\"" >> $config_h
elif test "$host_os" = "netbsd"; then
    echo "OS=netbsd" >> $config_mak
    echo "#define HOST_NETBSD 1" >> $config_h
    echo "#define HOST_OS \"netbsd\"" >> $config_h
elif test "$host_os" = "darwin"; then
    echo "OS=darwin" >> $config_mak
    echo "#define HOST_DARWIN 1" >> $config_h
    echo "#define HOST_OS \"darwin\"" >> $config_h
elif test "$host_os" = "windows"; then
    echo "OS=windows" >> $config_mak
    echo "#define HOST_WINDOWS 1" >> $config_h
    echo "#define HOST_OS \"windows\"" >> $config_h
else
    echo "Unsupported OS"
    exit 1
fi
if test "$host_cpu" = "i386" ; then
    echo "ARCH=i386" >> $config_mak
    echo "#define HOST_I386 1" >> $config_h
    echo "#define HOST_ARCH \"i386\"" >> $config_h
elif test "$host_cpu" = "x86_64" ; then
    echo "ARCH=x86_64" >> $config_mak
    echo "#define HOST_X86_64 1" >> $config_h
    echo "#define HOST_ARCH \"x86_64\"" >> $config_h
elif test "$host_cpu" = "ppc" ; then
    echo "ARCH=ppc" >> $config_mak
    echo "#define HOST_PPC 1" >> $config_h
    echo "#define HOST_ARCH \"ppc\"" >> $config_h
elif test "$host_cpu" = "ppc64" ; then
    echo "ARCH=ppc64" >> $config_mak
    echo "#define HOST_PPC64 1" >> $config_h
    echo "#define HOST_ARCH \"ppc64\"" >> $config_h
else
    echo "Unsupported CPU"
    exit 1
fi

echo "SRC_PATH=$source_path" >> $config_mak
echo "prefix=$prefix" >> $config_mak
echo "bindir=$prefix/bin" >> $config_mak
echo "libdir=$libdir" >> $config_mak

echo "build_static=$build_static" >> $config_mak
echo "build_shared=$build_shared" >> $config_mak

VERSION=`sed < $source_path/$PACKAGE.spec -n '/^\%define version[	]*/s///p'`
RELEASE=`sed < $source_path/$PACKAGE.spec -n '/^\%define release[	]*/s///p'`
SVNDATE=`sed < $source_path/$PACKAGE.spec -n '/^\%define svndate[ 	]*/s///p'`
if test -z "$SVNDATE"; then
    SVNDATE=`date '+%Y%m%d'`
fi
SNAPSHOT=0
if echo "$RELEASE" | grep -q ^0; then
    SNAPSHOT=1
fi
echo "VERSION=$VERSION" >> $config_mak
echo "SVNDATE=$SVNDATE" >> $config_mak
echo "SNAPSHOT=$SNAPSHOT" >> $config_mak
echo "#define CPUINFO_SNAPSHOT $SNAPSHOT" >> $config_h
if test "$SNAPSHOT" = "1"; then
    echo "#define CPUINFO_VERSION \"$VERSION-Pre ($SVNDATE)\"" >> $config_h
else
    echo "#define CPUINFO_VERSION \"$VERSION\"" >> $config_h
fi

if test "$has_visibility_attribute" = "yes"; then
    echo "#define HAVE_VISIBILITY_ATTRIBUTE 1" >> $config_h
else
    echo "#undef HAVE_VISIBILITY_ATTRIBUTE" >> $config_h
fi

config_mak="config.mak"
echo "# Automatically generated by configure - do not modify" > $config_mak
echo "include config-host.mak" >> $config_mak

config_h="config.h"
echo "/* Automatically generated by configure - do not modify */" > $config_h
echo "#include \"config-host.h\"" >> $config_h

# build tree in object directory if source path is different from current one
if test "$source_path_used" = "yes" ; then
    case $source_path in
    ..*)
	sp1=..
	;;
    esac
    ln -sf $source_path/Makefile Makefile
fi
